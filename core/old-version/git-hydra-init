
. git-hydra-logger  

usage() {
    echo
    echo "usage: git hydra init"
}

main() {
    if is_command_tutorial $@; then
        usage
    else
        require_git_repo
        hydra_header

        if test "$(is_hydra_initialized)" != true; then
            info "Initializing Hydra...\n"
            info "Define branch names for:\n"

            define_production_branch
            define_release_branch
            define_development_branch
            
            info "Define prefixes for:\n"

            define_feature_prefix
            define_bug_prefix
            define_fix_prefix

            hydra_init
        else
            warn "Hydra is already initialized!\n"
            warn "Run ${LIGHT_GREEN}git hydra reinit$NC to initialize it again...\n"
        fi
    fi
}

define_production_branch() {
    branch_type="production"
    branch_name="master"

    info "Production: ${CYAN}[$branch_name]$NC "
    read p_branch_name

    if [ -n "$p_branch_name" ]; then
        branch_name=$p_branch_name
    fi

    define_branch $branch_type $branch_name
}

define_release_branch() {
    branch_type="release"
    branch_name=$branch_type

    info "Release: ${CYAN}[$branch_name]$NC "
    read p_branch_name

    if [ -n "$p_branch_name" ]; then
        branch_name=$p_branch_name
    fi

    define_branch $branch_type $branch_name
}

define_development_branch() {
    info "Development:\n"
    info "Will this repository have more than one development branch? (y/n) "
    read p_confirm

    if [ ${p_confirm,,} = "y" ]; then
        define_multiple_development_branch
    else
        branch_name="develop"
        branch_type="$branch_name.$branch_name"

        info "Define branch name for Development: ${CYAN}[$branch_name]$NC "
        read p_branch_name

        if [ -n "$p_branch_name" ]; then
            branch_name=$p_branch_name
        fi

        define_branch $branch_type $branch_name
    fi
}

define_multiple_development_branch() {
    coherent_number_of_dev_branches=4
    branch_type="develop"

    while [[ ! $p_number_of_dev_branches =~ $NUMERIC_REGEX ||
               "$p_number_of_dev_branches" -le 0 ]]; do

        info "How many development branches? "
        read p_number_of_dev_branches

        if [[ $p_number_of_dev_branches =~ $NUMERIC_REGEX &&
              $p_number_of_dev_branches -gt $coherent_number_of_dev_branches ]]; then
            info "Are you sure that you want to configure $p_number_of_dev_branches development branches? (y/n) "
            read p_confirm

            if [ ${p_confirm,,} != "y" ]; then
                p_number_of_dev_branches=-1
            fi
        fi
    done

    info "Define branch name for:\n"

    for i in $(seq 1 $p_number_of_dev_branches); do
        branch_name="$branch_type$i"

        info "Development Branch $i: ${CYAN}[$branch_name]$NC "
        read p_branch_name

        if [ -n "$p_branch_name" ]; then
            branch_name=$p_branch_name
        fi

        define_branch $branch_type $branch_name $branch_type$i
    done
}

define_branch() {
    local branch_type=$1; shift
    local branch_name=$1; shift
    local branch_subtype=$1

    if [ -n "$branch_subtype" ]; then
        branch_type="$branch_type.$branch_subtype"
    fi

    set_hydra_branch $branch_type $branch_name
}

set_hydra_branch() {
    branch_type=$1; shift
    branch_name=$1

    git_do "config $CONFIG_PREFIX.branch.$branch_type $branch_name"
}

define_feature_prefix() {
    prefix_type="feature"
    prefix_name=$prefix_type

    info "Features: ${CYAN}[$prefix_name/]$NC "
    read p_prefix_name

    if [ -n "$p_prefix_name" ]; then
        prefix_name=$p_prefix_name
    fi

    define_prefix $prefix_type $prefix_name
}

define_bug_prefix() {
    prefix_type="bug"
    prefix_name=$prefix_type

    info "Bugs: ${CYAN}[$prefix_name/]$NC "
    read p_prefix_name

    if [ -n "$p_prefix_name" ]; then
        prefix_name=$p_prefix_name
    fi

    define_prefix $prefix_type $prefix_name
}

define_fix_prefix() {
    prefix_type="fix"
    prefix_name=$prefix_type

    info "Fixes: ${CYAN}[$prefix_name/]$NC "
    read p_prefix_name

    if [ -n "$p_prefix_name" ]; then
        prefix_name=$p_prefix_name
    fi

    define_prefix $prefix_type $prefix_name
}

define_prefix() {
    prefix_type=$1; shift
    prefix_name=$1

    set_hydra_prefix $prefix_type $prefix_name
}

set_hydra_prefix() {
    prefix_type=$1; shift
    prefix_name=$1

    git_do "config $CONFIG_PREFIX.prefix.$prefix_type $prefix_name"
}

hydra_init() {
    set_hydra_config "initialized" "true"
}
