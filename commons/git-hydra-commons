
# Loading source file
. git-commons
. git-hydra-logger

CONFIG_PREFIX="githydra"

retrieve_hydra_template() {
    retrieve_hydra_key "template.path"
}

retrieve_hydra_key() {
    local key=$1
    git_do config --get $CONFIG_PREFIX.$key
}

require_hydra_template() {
    if [ -z $(retrieve_hydra_template) ]; then
        error "You must specify a template to use git hydra! Run ${GREEN}git hydra config template ${PURPLE}path_to_template$NC to configure it...\n"
    fi
}

retrieve_commands_as_map() {
    jq -c '.commands' <<< $template
}

retrieve_commands_as_json() {
    local json=$(retrieve_commands_as_map)

    jq -c '.[]' <<< $json
}

retrieve_commands() {
    local json=$(retrieve_commands_as_map)

    jq -c -r 'map(.name) | join(" ")' <<< $json
}

retrieve_command_actions_as_map() {
    local command=$1
    local json=$(retrieve_commands_as_json)

    jq -c --arg COMMAND "$command" 'select(.name == $COMMAND) | .actions' <<< $json
}

retrieve_command_actions_as_json() {
    local command=$1
    local json=$(retrieve_command_actions_as_map $command)

    jq -c '.[]' <<< $json
}

retrieve_command_action() {
    local command=$1; shift
    local action=$1
    local json=$(retrieve_command_actions_as_json $command)

    jq -c --arg ACTION "$action" 'select(.name == $ACTION)' <<< $json
}

retrieve_action_execution() {
    local command=$1; shift
    local action=$1
    local json=$(retrieve_command_action $command $action)

    jq -c '.execution' <<< $json
}

retrieve_action_execution_do() {
    local command=$1; shift
    local action=$1; shift
    local sequence=$1
    local json=$(retrieve_action_execution $command $action)

    jq -c --arg SEQUENCE $sequence '.[] | select(.sequence = $SEQUENCE) | .do' <<< $json
}

retrieve_action_execution_do_action() {
    local do_json=$1

    jq -r '.action' <<< $do_json
}

retrieve_command_actions() {
    local command=$1
    local json=$(retrieve_command_actions_as_map $command)

    jq -c -r 'map(.name) | join(" ")' <<< $json
}

validate_command() {
    local command=$1

    if [[ $(retrieve_commands) != *"$command"* ]]; then
        error "Invalid command!\n"
    fi
}

validate_action() {
    local command=$1; shift
    local action=$1

    if [[ $(retrieve_command_actions $command) != *"$action"* ]]; then
        error "Invalid action!\n"
    fi
}

read_template() {
    local template=$1

    jq -c . $template
}

is_tutorial() {
    has_no_parameters $@ || is_command_tutorial $@
}

is_command_tutorial() {
    [[ $1 = "-help" ||
       $1 = "?"     ||
       $1 = "man" ]]
}
